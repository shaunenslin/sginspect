"use strict";
angular.module("mwl.calendar", ["ui.bootstrap"]), angular.module("mwl.calendar").run(["$templateCache", function(a) {
    a.put("templates/day.html", '<div class="cal-day-box"><div class="row-fluid clearfix cal-row-head"><div class="span1 col-xs-1 cal-cell">{{ timeLabel || \'Time\' }}</div><div class="span11 col-xs-11 cal-cell">{{ eventLabel || \'Events\' }}</div></div><div class="cal-day-panel" ng-style="{height: (days.length * 60) + \'px\'}"><div class="cal-day-panel-hour"><div class="cal-day-hour" ng-repeat="day in days"><div class="row-fluid cal-day-hour-part"><div class="span1 col-xs-1"><b>{{ day.label }}</b></div><div class="span11 col-xs-11"></div></div><div class="row-fluid cal-day-hour-part"><div class="span1 col-xs-1"></div><div class="span11 col-xs-11"></div></div></div></div><div class="pull-left day-event day-highlight dh-event-{{ event.type }}" ng-repeat="event in view track by $index" ng-style="{top: event.top + \'px\', left: event.left + 60 + \'px\', height: event.height + \'px\'}"><!--<span class="cal-hours">{{ event.starts_at | date:\'d MMM HH:mm\' }} - {{ event.ends_at | date:\'d MMM HH:mm\' }}<br></span>--><a href="javascript:;" class="event-item" ng-click="eventClick({$event: event})"><span>{{ event.title | truncateEventTitle:20:event.height }}</span></a></div></div></div>'), a.put("templates/main.html", '<div class="cal-context" style="width: 100%;"><div class="alert alert-danger" ng-if="!view">The value passed to calendar-view is not set</div><mwl-calendar-year calendar-events="events" calendar-current-day="currentDay" calendar-event-click="eventClick" calendar-curr-day-click="currDayClick" calendar-edit-event-click="eventEditClick" calendar-delete-event-click="eventDeleteClick" calendar-edit-event-html="editEventHtml" calendar-delete-event-html="deleteEventHtml" calendar-auto-open="autoOpen" ng-if="view == \'year\'"></mwl-calendar-year><mwl-calendar-month calendar-events="events" calendar-current-day="currentDay" calendar-event-click="eventClick" calendar-current-day="currentDay" calendar-edit-event-click="eventEditClick" calendar-delete-event-click="eventDeleteClick" calendar-edit-event-html="editEventHtml" calendar-delete-event-html="deleteEventHtml" calendar-auto-open="autoOpen" calendar-use-iso-week="useIsoWeek" ng-if="view == \'month\'"></mwl-calendar-month><mwl-calendar-week calendar-events="events" calendar-current-day="currentDay" calendar-event-click="eventClick" calendar-use-iso-week="useIsoWeek" calendar-week-title-label="{{ weekTitleLabel }}" ng-if="view == \'week\'"></mwl-calendar-week><mwl-calendar-day calendar-events="events" calendar-current-day="currentDay" calendar-event-click="eventClick" calendar-event-label="{{ eventLabel }}" calendar-time-label="{{ timeLabel }}" calendar-day-view-start="{{ dayViewStart }}" calendar-day-view-end="{{ dayViewEnd }}" ng-if="view == \'day\'"></mwl-calendar-day></div>'), a.put("templates/month.html", '<div class="cal-row-fluid cal-row-head"><div class="cal-cell1" ng-repeat="day in weekDays">{{ day }}</div></div><div class="cal-month-box"><div ng-repeat="week in view track by $index"><div class="cal-row-fluid cal-before-eventlist"><div class="cal-cell1 cal-cell {{ day.highlightClass }}" ng-repeat="day in week track by $index" ng-click="dayClicked($parent.$index, $index); drillDown(day.label,$parent.$index)" ng-class="{pointer: day.events.length > 0}"><div class="cal-month-day" ng-class="{\'cal-day-outmonth\': !day.inMonth, \'cal-day-inmonth\': day.inMonth, \'cal-day-weekend\': $index == 5 || $index == 6, \'cal-day-today\': day.isToday}"><span ng-if="!day.events[0].alt_event_number"><small ng-class="day.events[0].color ? \'cal-events-num badge badge-green pull-left\' : \'cal-events-num badge badge-important pull-left\'"  ng-show="day.events.length > 0">{{ day.events.length }}</small> <small class="cal-events-num badge badge-success pull-left" ng-if="day.events.color && day.events.length > 0">{{ day.events.length }}</small></span><span ng-if="day.events[0].alt_event_number >= 0"><small ng-class="day.events[0].color ? \'cal-events-num badge badge-green pull-left\' : \'cal-events-num badge badge-important pull-left\'"  ng-show="day.events[0].alt_event_number > 0">{{ day.events[0].alt_event_number }}</small> <small class="cal-events-num badge badge-success pull-left" ng-if="day.events.color && day.events[0].alt_event_number > 0">{{ day.events[0].alt_event_number }}</small></span> <span class="pull-right" data-cal-date="" ng-click="drillDown(day.label)">{{ day.label }}</span><div class="cal-day-tick" ng-show="day.isOpened"><i class="glyphicon glyphicon-chevron-up"></i> <i class="fa fa-chevron-up"></i></div></div></div></div><div class="cal-slide-box" collapse="!week.isOpened"><div class="cal-slide-content cal-event-list"><ul class="unstyled list-unstyled"><li ng-repeat="event in openEvents track by $index"><span class="pull-left event event-{{ event.type }}"></span> &nbsp; <a href="javascript:;" class="event-item" ng-click="eventClick({$event: event})">{{ event.title }}</a> <a href="javascript:;" class="event-item-edit" ng-if="editEventHtml && event.editable !== false" ng-bind-html="$sce.trustAsHtml(editEventHtml)" ng-click="eventEditClick({$event: event})"></a> <a href="javascript:;" class="event-item-delete" ng-if="deleteEventHtml && event.deletable !== false" ng-bind-html="$sce.trustAsHtml(deleteEventHtml)" ng-click="eventDeleteClick({$event: event})"></a></li></ul></div></div></div></div>'), a.put("templates/week.html", '<div class="cal-week-box"><div class="cal-row-fluid cal-row-head"><div class="cal-cell1" ng-repeat="column in view.columns track by $index" ng-class="{\'cal-day-weekend\': $index > 4, \'cal-day-today\': column.isToday}">{{ column.weekDay }}<br><small><span data-cal-date="" ng-click="drillDown(column.day)" class="pointer">{{ column.date }}</span></small></div></div><div class="cal-row-fluid" ng-repeat="event in view.events track by $index"><div class="cal-cell{{ event.daySpan }} cal-offset{{ event.dayOffset }} day-highlight dh-event-{{ event.type }}" data-event-class=""><a href="javascript:;" ng-click="eventClick({$event: event})" class="cal-event-week">{{ event.title }}</a></div></div></div>'), a.put("templates/year.html", '<div class="cal-year-box"><div ng-repeat="year in view track by $index"><div class="row cal-before-eventlist"><div class="span3 col-md-3 col-xs-6 cal-cell" ng-repeat="month in year track by $index" ng-click="monthClicked($parent.$index, $index)" ng-class="{pointer: month.events.length > 0, \'cal-day-today\': month.isToday}"><span class="pull-right" data-cal-date="" ng-click="drillDown(month.monthIndex)">{{ month.label }}</span> <small class="cal-events-num badge badge-important pull-left" ng-show="month.events.length > 0">{{ month.events.length }}</small><div class="cal-day-tick" ng-show="month.isOpened"><i class="glyphicon glyphicon-chevron-up"></i> <i class="fa fa-chevron-up"></i></div></div></div><div class="cal-slide-box" collapse="!year.isOpened"><span class="cal-slide-tick"></span><div class="cal-slide-content"><ul class="unstyled list-unstyled"><li ng-repeat="event in openEvents track by $index"><span class="pull-left event" ng-class="\'event-\' + event.type"></span> &nbsp; <a href="javascript:;" class="event-item" ng-click="eventClick({$event: event})">{{ event.title }}</a> <a href="javascript:;" class="event-item-edit" ng-if="editEventHtml && event.editable !== false" ng-bind-html="$sce.trustAsHtml(editEventHtml)" ng-click="eventEditClick({$event: event})"></a> <a href="javascript:;" class="event-item-delete" ng-if="deleteEventHtml && event.deletable !== false" ng-bind-html="$sce.trustAsHtml(deleteEventHtml)" ng-click="eventDeleteClick({$event: event})"></a></li></ul></div></div></div></div>')
}]), angular.module("mwl.calendar").constant("moment", window.moment), angular.module("mwl.calendar").service("calendarHelper", ["$filter", "moment", function(f, d) {
    function c() {
        return 1 === d().startOf("week").day()
    }

    function g(a) {
        return angular.isDefined(a) ? a : c()
    }
    var b = this;
    this.getMonthNames = function(i) {
        for (var h = i ? "MMM" : "MMMM", j = [], e = 0; 11 >= e; e++) {
            j.push(f("date")(new Date(2014, e), h))
        }
        return j
    }, this.getWeekDayNames = function(k, h) {
        for (var e = k ? "EEE" : "EEEE", j = [], m = g(h) ? 22 : 21, n = 0; 6 >= n; n++) {
            j.push(f("date")(new Date(2014, 8, m + n), e))
        }
        return j
    }, this.eventIsInPeriod = function(j, i, k, h) {
        return d(j).isAfter(d(k)) && d(j).isBefore(d(h)) || d(i).isAfter(d(k)) && d(i).isBefore(d(h)) || d(j).isBefore(d(k)) && d(i).isAfter(d(h)) || d(j).isSame(d(k)) || d(i).isSame(d(h))
    }, this.getYearView = function(m, t) {
        for (var k = [], l = b.getMonthNames(), h = 0; 3 > h; h++) {
            for (var p = [], q = 0; 4 > q; q++) {
                var w = 12 - l.length,
                    u = new Date(d(t).format("YYYY"), w, 1),
                    j = d(u).add(1, "month").subtract(1, "second").toDate();
                p.push({
                    label: l.shift(),
                    monthIndex: w,
                    isToday: d(u).startOf("month").isSame(d().startOf("month")),
                    events: m.filter(function(a) {
                        return b.eventIsInPeriod(a.starts_at, a.ends_at, u, j)
                    })
                })
            }
            k.push(p)
        }
        return k
    }, this.getMonthView = function(t, A, n) {
        function j() {
            var a = x.day() - w;
            return 0 > a && (a = 6), a
        }
        for (var w = g(n) ? 1 : 0, x = d(A).startOf("month"), D = d(A).endOf("month").date(), B = [], k = new Array(7), C = t.map(function(h, a) {
            return h.$id = a, h
        }), l = 1; D >= l; l++) {
            if (1 == l) {
                for (var z = j(x), q = x.clone(); z > 0;) {
                    z--, q = q.subtract(1, "day"), k[z] = {
                        label: q.date(),
                        date: q.clone(),
                        inMonth: !1,
                        events: []
                    }
                }
            }
            if (k[j(x)] = {
                    label: x.date(),
                    inMonth: !0,
                    isToday: d().startOf("day").isSame(x),
                    date: x.clone(),
                    events: C.filter(function(a) {
                        return b.eventIsInPeriod(a.starts_at, a.ends_at, x.clone().startOf("day"), x.clone().endOf("day"))
                    })
                }, l == D) {
                for (var z = j(x), p = x.clone(); 6 > z;) {
                    z++, p = p.add(1, "day"), k[z] = {
                        label: p.date(),
                        date: p.clone(),
                        inMonth: !1,
                        events: []
                    }
                }
            }(6 === j(x) || l == D) && (B.push(k), k = new Array(7)), x = x.add(1, "day")
        }
        return B
    }, this.getWeekView = function(t, k, e) {
        for (var n, p, z = g(e) ? 1 : 0, w = new Array(7), h = b.getWeekDayNames(!1, e), x = k.getDay(), j = x; j >= 0; j--) {
            var q = d(k).subtract(x - j, "days").add(z, "day").toDate();
            w[j] = {
                weekDay: h[j],
                day: f("date")(q, "d"),
                date: f("date")(q, "d MMM"),
                isToday: d(q).startOf("day").isSame(d().startOf("day"))
            }, 0 == j ? n = q : 6 == j && (p = q)
        }
        for (var j = x + 1; 7 > j; j++) {
            var q = d(k).add(j - x, "days").add(z, "day").toDate();
            w[j] = {
                weekDay: h[j],
                day: f("date")(q, "d"),
                date: f("date")(q, "d MMM"),
                isToday: d(q).startOf("day").isSame(d().startOf("day"))
            }, 0 == j ? n = q : 6 == j && (p = q)
        }
        p = d(p).endOf("day").toDate(), n = d(n).startOf("day").toDate();
        var l = t.filter(function(a) {
            return b.eventIsInPeriod(a.starts_at, a.ends_at, n, p)
        }).map(function(m) {
            var i = d(m.ends_at).startOf("day").diff(d(m.starts_at).startOf("day"), "days") + 1;
            i >= 7 && (i = 7, d(m.ends_at).startOf("day").diff(d(p).startOf("day"), "days") < 0 && (i += d(m.ends_at).startOf("day").diff(d(p).startOf("day"), "days") + z));
            var o = d(m.starts_at).startOf("day").diff(d(n).startOf("day"), "days");
            return 0 > o && (o = 0), o > 6 && (o = 6), i - o > 0 && (i -= o), m.daySpan = i, m.dayOffset = o, m
        });
        return {
            columns: w,
            events: l
        }
    }, this.getDayView = function(m, h, q, j) {
        var l = d(h).startOf("day").add(q, "hours"),
            o = d(h).startOf("day").add(j, "hours"),
            p = 60 * (j - q + 1),
            k = [];
        return m.filter(function(a) {
            return b.eventIsInPeriod(a.starts_at, a.ends_at, d(h).startOf("day").toDate(), d(h).endOf("day").toDate())
        }).map(function(n) {
            if (n.top = d(n.starts_at).isBefore(l) ? 0 : d(n.starts_at).startOf("minute").diff(l.startOf("minute"), "minutes") - 2, d(n.ends_at).isAfter(o)) {
                n.height = p - n.top
            } else {
                var i = n.starts_at;
                d(n.starts_at).isBefore(l) && (i = l.toDate()), n.height = d(n.ends_at).diff(i, "minutes")
            }
            return n.top - n.height > p && (n.height = 0), n.left = 0, n
        }).filter(function(a) {
            return a.height > 0
        }).map(function(i) {
            var a = !0;
            return k.forEach(function(e, s) {
                var r = !0;
                e.forEach(function(n) {
                    (b.eventIsInPeriod(i.starts_at, i.ends_at, n.starts_at, n.ends_at) || b.eventIsInPeriod(n.starts_at, n.ends_at, i.starts_at, i.ends_at)) && (r = !1)
                }), r && a && (a = !1, i.left = 150 * s, k[s].push(i))
            }), a && (i.left = 150 * k.length, k.push([i])), i
        })
    }, this.toggleEventBreakdown = function(o, m, j) {
        function p() {
            o = o.map(function(a) {
                return a.isOpened = !1, a.map(function(i) {
                    return i.isOpened = !1, i
                })
            })
        }
        var h = [];
        if (o[m][j].events.length > 0) {
            var k = o[m][j].isOpened;
            p(), o[m][j].isOpened = !k, o[m].isOpened = !k, h = o[m][j].events
        } else {
            p()
        }
        return {
            view: o,
            openEvents: h
        }
    }
}]), angular.module("mwl.calendar").directive("mwlCalendarYear", ["$sce", "$timeout", "calendarHelper", "moment", function(d, c, b, f) {
    return {
        templateUrl: "templates/year.html",
        restrict: "EA",
        require: "^mwlCalendar",
        scope: {
            events: "=calendarEvents",
            currentDay: "=calendarCurrentDay",
            eventClick: "=calendarEventClick",
            eventEditClick: "=calendarEditEventClick",
            eventDeleteClick: "=calendarDeleteEventClick",
            editEventHtml: "=calendarEditEventHtml",
            deleteEventHtml: "=calendarDeleteEventHtml",
            autoOpen: "=calendarAutoOpen"
        },
        link: function(a, e, h, j) {
            function k() {
                a.view = b.getYearView(a.events, a.currentDay), a.autoOpen && !g && a.view.forEach(function(l, i) {
                    l.forEach(function(n, m) {
                        n.label == f(a.currentDay).format("MMMM") && (a.monthClicked(i, m), c(function() {
                            g = !1
                        }))
                    })
                })
            }
            var g = !1;
            a.$sce = d, j.titleFunctions.year = function(i) {
                return f(i).format("YYYY")
            }, a.$watch("currentDay", k), a.$watch("events", k, !0), a.monthClicked = function(l, i) {
                var m = b.toggleEventBreakdown(a.view, l, i);
                a.view = m.view, a.openEvents = m.openEvents
            }, a.drillDown = function(i) {
                j.changeView("month", f(a.currentDay).clone().month(i).toDate())
            }
        }
    }
}]), angular.module("mwl.calendar").directive("mwlCalendarWeek", ["moment", "calendarHelper", function(b, a) {
    return {
        templateUrl: "templates/week.html",
        restrict: "EA",
        require: "^mwlCalendar",
        scope: {
            events: "=calendarEvents",
            currentDay: "=calendarCurrentDay",
            eventClick: "=calendarEventClick",
            useIsoWeek: "=calendarUseIsoWeek",
            weekTitleLabel: "@calendarWeekTitleLabel"
        },
        link: function(e, j, c, f) {
            function g() {
                e.view = a.getWeekView(e.events, e.currentDay, e.useIsoWeek)
            }
            var h = e.weekTitleLabel || "Week {week} of {year}";
            f.titleFunctions.week = function(d) {
                return h.replace("{week}", b(d).week()).replace("{year}", b(d).format("YYYY"))
            }, e.drillDown = function(d) {
                f.changeView("day", b(e.currentDay).clone().date(d).toDate())
            }, e.$watch("currentDay", g), e.$watch("events", g, !0)
        }
    }
}]), angular.module("mwl.calendar").directive("mwlCalendarMonth", ["$sce", "$timeout", "$filter", "moment", "calendarHelper","$rootScope", function(f, d, c, g, b,rS) {
    return {
        templateUrl: "templates/month.html",
        restrict: "EA",
        require: "^mwlCalendar",
        scope: {
            events: "=calendarEvents",
            currentDay: "=calendarCurrentDay",
            eventClick: "=calendarEventClick",
            eventEditClick: "=calendarEditEventClick",
            eventDeleteClick: "=calendarDeleteEventClick",
            editEventHtml: "=calendarEditEventHtml",
            deleteEventHtml: "=calendarDeleteEventHtml",
            autoOpen: "=calendarAutoOpen",
            useIsoWeek: "=calendarUseIsoWeek"
        },
        link: function(e, j, k, l) {
            function h() {
                e.view = b.getMonthView(e.events, e.currentDay, e.useIsoWeek), e.autoOpen && !a && e.view.forEach(function(m, i) {
                    m.forEach(function(o, n) {
                        o.inMonth && g(e.currentDay).startOf("day").isSame(o.date.startOf("day")) && (e.dayClicked(i, n), d(function() {
                            a = !1
                        }))
                    })
                })
            }
            var a = !1;
            e.$sce = f, l.titleFunctions.month = function(i) {
                return c("date")(i, "MMMM yyyy")
            }, e.$watch("currentDay", h), e.$watch("events", h, !0), e.weekDays = b.getWeekDayNames(!1, e.useIsoWeek), e.dayClicked = function(n, m) {
                var i = b.toggleEventBreakdown(e.view, n, m);
                e.view = i.view, e.openEvents = i.openEvents
            }, e.drillDown = function(i,p) {
                console.log(i);
                var parObj = {};
                if(p === 0 && (i > 0 && i >= 25)){
                    parObj.Diff =  "-1";
                }else if(p > 4 && (i < 28)){
                    parObj.Diff =   "1";
                }

                console.log(e.currentDay);
                parObj.Date = JSON.stringify(g(e.currentDay).clone().date(i).toDate());
                console.log(JSON.stringify(g(e.currentDay).clone().date(i).toDate()));
                console.log(parObj);
                rS.$broadcast('calDayClicked',parObj);
                return;
                //l.changeView("day", g(e.currentDay).clone().date(i).toDate())
            }, e.highlightEvent = function(m, i) {
                e.view = e.view.map(function(n) {
                    return n.isOpened = !1, n.map(function(o) {
                        if (delete o.highlightClass, o.isOpened = !1, i) {
                            var p = o.events.filter(function(q) {
                                    return q.$id == m.$id
                                }).length > 0;
                            p && (o.highlightClass = "day-highlight dh-event-" + m.type)
                        }
                        return o
                    })
                })
            }
        }
    }
}]), angular.module("mwl.calendar").directive("mwlCalendarDay", ["$filter", "moment", "calendarHelper", function(d, c, b) {
    return {
        templateUrl: "templates/day.html",
        restrict: "EA",
        require: "^mwlCalendar",
        scope: {
            events: "=calendarEvents",
            currentDay: "=calendarCurrentDay",
            eventClick: "=calendarEventClick",
            eventLabel: "@calendarEventLabel",
            timeLabel: "@calendarTimeLabel",
            dayViewStart: "@calendarDayViewStart",
            dayViewEnd: "@calendarDayViewEnd"
        },
        link: function(f, g, h, a) {
            function j() {
                f.view = b.getDayView(f.events, f.currentDay, k.hours(), p.hours())
            }
            var k = c(f.dayViewStart || "00:00", "HH:mm"),
                p = c(f.dayViewEnd || "23:00", "HH:mm");
            f.days = [];
            for (var m = c(k), e = 0; e <= p.diff(k, "hours"); e++) {
                f.days.push({
                    label: m.format("ha")
                }), m.add(1, "hour")
            }
            a.titleFunctions.day = function(i) {
                return d("date")(i, "EEEE d MMMM, yyyy")
            }, f.$watch("currentDay", j), f.$watch("events", j, !0)
        }
    }
}]), angular.module("mwl.calendar").directive("mwlCalendar", function() {
    return {
        templateUrl: "templates/main.html",
        restrict: "EA",
        scope: {
            events: "=calendarEvents",
            view: "=calendarView",
            currentDay: "=calendarCurrentDay",
            control: "=calendarControl",
            eventClick: "&calendarEventClick",
            currDayClick: "&currDayClick",
            eventEditClick: "&calendarEditEventClick",
            eventDeleteClick: "&calendarDeleteEventClick",
            editEventHtml: "=calendarEditEventHtml",
            deleteEventHtml: "=calendarDeleteEventHtml",
            autoOpen: "=calendarAutoOpen",
            useIsoWeek: "=calendarUseIsoWeek",
            eventLabel: "@calendarEventLabel",
            timeLabel: "@calendarTimeLabel",
            dayViewStart: "@calendarDayViewStart",
            dayViewEnd: "@calendarDayViewEnd",
            weekTitleLabel: "@calendarWeekTitleLabel"
        },
        controller: ["$scope", "$timeout", "$locale", "moment","$rootScope", function(j, g, c, m,rS) {
            var b = this;
            this.titleFunctions = {}, this.changeView = function(e, d) {
                j.view = e, j.currentDay = d
            }, j.control = j.control || {}, j.control.prev = function() {
                j.currentDay = m(j.currentDay).subtract(1, j.view).toDate()
                rS.$broadcast('calNavClicked', j.currentDay);
            }, j.control.next = function() {
                j.currentDay = m(j.currentDay).add(1, j.view).toDate()
                rS.$broadcast('calNavClicked', j.currentDay);
            }, j.control.getTitle = function() {
                return b.titleFunctions[j.view] ? b.titleFunctions[j.view](j.currentDay) : ""
            };
            var f = !0,
                h = j.$watch(function() {
                    return m.locale() + c.id
                }, function() {
                    if (f) {
                        return void(f = !1)
                    }
                    var d = angular.copy(j.view);
                    j.view = "redraw", g(function() {
                        j.view = d
                    })
                }),
                k = j.$on("$destroy", function() {
                    k(), h()
                })
        }]
    }
}), angular.module("mwl.calendar").filter("truncateEventTitle", function() {
    return function(d, c, b) {
        return d ? d.length >= c && d.length / 20 > b / 30 ? d.substr(0, c) + "..." : d : ""
    }
});
